######################################################################
# Automatically generated by qmake (3.1) Tue Aug 24 19:56:43 2021
######################################################################

TEMPLATE = app
TARGET = pa10mini

windows: mingw: {
QWT_DIR = "C:/Qwt-6.2.0"
} else {
QWT_DIR = "C:/Qwt-6.2.0-msvc"
}

INCLUDEPATH += .
windows: INCLUDEPATH += $$QWT_DIR/include
windows: INCLUDEPATH += D:\workspace\dlfcn-win32\src
unix: INCLUDEPATH += /usr/include/qwt

QT += core widgets opengl gui

CONFIG += c++14

# The following define makes your compiler warn you if you use any
# feature of Qt which has been marked as deprecated (the exact warnings
# depend on your compiler). Please consult the documentation of the
# deprecated API in order to know how to port your code away from it.
DEFINES += QT_DEPRECATED_WARNINGS
windows: DEFINES += _WINDOWS

# QWT
windows: include ( $$QWT_DIR/features/qwt.prf )
CONFIG += qwt

# dlfcn-win32 is an implementation of dlfcn for Windows: git@github.com:dlfcn-win32/dlfcn-win32.git
windows: {
mingw: {
    LIBDL_BUILD_DIR = "D:\workspace\build-dlfcn-win32-Desktop_Qt_5_15_2_MinGW_64_bit-Debug"
    LIBS += $$LIBDL_BUILD_DIR/lib/libdl.dll.a
    LIBS += $$LIBDL_BUILD_DIR/bin/libdl.dll
} else {
    LIBDL_BUILD_DIR = "C:/Users/ASUS/workspace/github/build-dlfcn-win32-Desktop_Qt_5_15_2_MSVC2019_64bit-Debug"
    LIBS += $$LIBDL_BUILD_DIR/lib/dl.lib
}
}
unix: LIBS += -ldl
unix: LIBS += -L/usr/lib -lqwt-qt5
#windows: LIBS += $$LIBDL_BUILD_DIR/lib/libdl.dll.a

# You can also make your code fail to compile if you use deprecated APIs.
# In order to do so, uncomment the following line.
# You can also select to disable deprecated APIs only up to a certain version of Qt.
#DEFINES += QT_DISABLE_DEPRECATED_BEFORE=0x060000    # disables all the APIs deprecated before Qt 6.0.0

# Input
HEADERS += circuititem.h \
           circuititemedit.h \
           daesystem.h \
           equaledit.h \
           expression.h \
           FlexLexer.h \
           location.hh \
           parser.hpp \
           pax_prototype.h \
           plot.h \
           plotwindow.h \
           position.hh \
           resource.h \
           scanner.h \
           schemeview.h \
           settingsdialog.h \
           solver.h \
           solverparam.h \
           stack.hh \
           textdriver.h \
           variablechooser.h \
           manzhuk/manzhuk.h \
           manzhuk/fcttask/fcttask.h \
           equaledit.h \
           schemeview.h \
           plot.h \
           FlexLexer.h

FORMS += circuititemedit.ui \
         pax_prototype.ui \
         plotwindow.ui \
         settingsdialog.ui \
         solverparam.ui \
         variablechooser.ui

SOURCES += circuititem.cpp \
           circuititemedit.cpp \
           daesystem.cpp \
           equaledit.cpp \
           expression.cpp \
           main.cpp \
           parser.cpp \
           pax_prototype.cpp \
           plot.cpp \
           plotwindow.cpp \
           scanner.cpp \
           schemeview.cpp \
           settingsdialog.cpp \
           solver.cpp \
           solverparam.cpp \
           textdriver.cpp \
           variablechooser.cpp \
           manzhuk/manzhuk.cpp

RESOURCES += pax_prototype.qrc

exists($$shell_path($${OUT_PWD}/manzhuk)) {
# ToDo: test it on Win32
} else {

# Copy plugin's JSONs
windows:    copydata.commands = $(COPY_DIR) $$shell_path($${PWD}/manzhuk) $$shell_path($${OUT_PWD}/manzhuk)
unix:       copydata.commands = $(COPY_DIR) $$shell_path($${PWD}/manzhuk) $$shell_path($${OUT_PWD}/)
}

message(pluginsPWD: $${PWD}/manzhuk)
message(pluginsOUTPWD: $${OUT_PWD}/manzhuk)

exists($$shell_path($${OUT_PWD}/manzhuk)) {
# Do nothing
} else {
    first.depends = $(first) copydata
    export(first.depends)
    export(copydata.commands)
    QMAKE_EXTRA_TARGETS += first copydata
}
